import { Dispatch } from 'redux'
import { decksAPI, UpdateDeckParams } from './decks-api.ts'
import { addDeckAC, deleteDeckAC, setDecksAC, updateDeckAC } from './decks-reducer.ts'
import {setAppStatusAC} from "../../app/app-reducer.ts";
import {AppDispatch} from "../../app/store.ts";
import axios, {isAxiosError} from "axios";

export const fetchDecksTC = () => async(dispatch: AppDispatch) => {
  try {
    // –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "loading"
  dispatch(setAppStatusAC('loading'))
    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    const res = await decksAPI.fetchDecks()
    console.log("Decks fetched:", res.data.items); // –ü—Ä–æ–≤–µ—Ä—è–µ–º API-–æ—Ç–≤–µ—Ç
    // –ö–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º store
    dispatch(setDecksAC(res.data.items))
    dispatch(setAppStatusAC('succeeded'))
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–æ–¥—ã:", error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    dispatch(setAppStatusAC('failed'))
  }
}
export const addDeckTC = (name: string) => async (dispatch: Dispatch) => {
  return decksAPI.addDeck(name).then((res) => {
    dispatch(addDeckAC(res.data))
  })
}

export const deleteDeckTC = (id: string) => async (dispatch: Dispatch) => {
  return decksAPI.deleteDeck(id).then((res) => {
    dispatch(deleteDeckAC(res.data.id))
  })
}
// Case 1: Errors on the backend side (server-side errors).
// The error is generated by Axios and `e.response.data` contains the server's response.
//  Case 2: network error = axios —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –ø–æ–ª—è e.message
// Case 3: Js error
export const updateDeckTC = (params: UpdateDeckParams) => async (dispatch: Dispatch) => {
  try{
    const res = await decksAPI.updateDeck(params)
    dispatch(updateDeckAC(res.data)) // –æ–±–Ω–æ–≤–∏–ª–∏ store
    // throw new Error("Boom!")  // üí• –û—à–∏–±–∫–∞
  }
  catch(e){
    console.log(e)
     let errorMessage: string = ''
    console.log("üìç Location error: updateDeckTC")
    if(isAxiosError(e)) {
      //case 1 case 2
      errorMessage = e.response?
          e.response?.data?.errorMessages?.[0].message || e.message//case 1, –æ—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
       : e.message //case 2, ce—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, offline
    }else{
      //case 3, js error
      errorMessage = (e as Error).message

      console.log('‚ùå Error while updating deck:', errorMessage)
    }
  }
}
type ServerError = {
  errorMessages: Array<{
    field: string
    message: string
  }>
}
